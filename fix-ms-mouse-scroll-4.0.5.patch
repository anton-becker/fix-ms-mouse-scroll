diff -pru a/drivers/hid/hid-core.c c/drivers/hid/hid-core.c
--- a/drivers/hid/hid-core.c	2015-09-22 00:02:12.561427732 +0300
+++ c/drivers/hid/hid-core.c	2015-09-22 00:05:45.196758072 +0300
@@ -1869,6 +1869,8 @@ static const struct hid_device_id hid_ha
 	{ HID_USB_DEVICE(USB_VENDOR_ID_MICROCHIP, USB_DEVICE_ID_PICOLCD) },
 	{ HID_USB_DEVICE(USB_VENDOR_ID_MICROCHIP, USB_DEVICE_ID_PICOLCD_BOOTLOADER) },
 	{ HID_USB_DEVICE(USB_VENDOR_ID_MICROSOFT, USB_DEVICE_ID_MS_COMFORT_MOUSE_4500) },
+	{ HID_USB_DEVICE(USB_VENDOR_ID_MICROSOFT, USB_DEVICE_ID_MS_WIRELESS_MOUSE_KSERIES) },
+	{ HID_USB_DEVICE(USB_VENDOR_ID_MICROSOFT, USB_DEVICE_ID_MS_SCULPT_ERGONOMIC_MOUSE) },
 	{ HID_USB_DEVICE(USB_VENDOR_ID_MICROSOFT, USB_DEVICE_ID_SIDEWINDER_GV) },
 	{ HID_USB_DEVICE(USB_VENDOR_ID_MICROSOFT, USB_DEVICE_ID_MS_NE4K) },
 	{ HID_USB_DEVICE(USB_VENDOR_ID_MICROSOFT, USB_DEVICE_ID_MS_NE4K_JP) },
diff -pru a/drivers/hid/hid-ids.h c/drivers/hid/hid-ids.h
--- a/drivers/hid/hid-ids.h	2015-09-22 00:02:12.561427732 +0300
+++ c/drivers/hid/hid-ids.h	2015-09-22 00:05:45.196758072 +0300
@@ -662,6 +662,8 @@
 #define USB_DEVICE_ID_MS_NE7K		0x071d
 #define USB_DEVICE_ID_MS_DIGITAL_MEDIA_3K	0x0730
 #define USB_DEVICE_ID_MS_COMFORT_MOUSE_4500	0x076c
+#define USB_DEVICE_ID_MS_WIRELESS_MOUSE_KSERIES	0x0745
+#define USB_DEVICE_ID_MS_SCULPT_ERGONOMIC_MOUSE	0x07a5
 #define USB_DEVICE_ID_MS_SURFACE_PRO_2   0x0799
 #define USB_DEVICE_ID_MS_TOUCH_COVER_2   0x07a7
 #define USB_DEVICE_ID_MS_TYPE_COVER_2    0x07a9
diff -pru a/drivers/hid/hid-microsoft.c c/drivers/hid/hid-microsoft.c
--- a/drivers/hid/hid-microsoft.c	2015-09-22 00:02:12.561427732 +0300
+++ c/drivers/hid/hid-microsoft.c	2015-09-22 00:10:18.320668311 +0300
@@ -29,6 +29,7 @@
 #define MS_NOGET		0x10
 #define MS_DUPLICATE_USAGES	0x20
 #define MS_RDESC_3K		0x40
+#define MS_VSCROLL		0x80
 
 static __u8 *ms_report_fixup(struct hid_device *hdev, __u8 *rdesc,
 		unsigned int *rsize)
@@ -227,6 +228,51 @@ static int ms_event(struct hid_device *h
 	return 0;
 }
 
+static bool check_vscroll_settings(struct hid_device *hdev)
+{
+	struct hid_report *report;
+	int ret;
+	__u8 feature_in[] = { 0x17, 0x00 };
+
+	report = hdev->report_enum[HID_FEATURE_REPORT].report_id_hash[0x17];
+	if (!report)
+		return false;
+
+	ret = hid_hw_raw_request(hdev, 0x17, feature_in, sizeof(feature_in),
+		HID_FEATURE_REPORT, HID_REQ_GET_REPORT);
+	if (ret <= 0) {
+		hid_dbg(hdev, "Mouse unknown vertical scroll wheel mode, return value: %i\n", ret);
+	} else if (ret == 2 && feature_in[0] == 0x17 && feature_in[1] == 0x00) {
+		hid_info(hdev, "Mouse vertical scroll wheel setting is compatible with linux applications.\n");
+	} else if (ret == 2 && feature_in[0] == 0x17) {
+		hid_info(hdev, "Mouse vertical scroll wheel mode needs to be reset to work normally with linux applications.\n");
+		return true;
+	} else {
+		hid_dbg(hdev, "Mouse unknown vertical scroll wheel mode, return values: %i %X %X\n", ret, (int) feature_in[0], (int) feature_in[1]);
+	}
+	return false;
+}
+
+static bool reset_vscroll_settings(struct hid_device *hdev)
+{
+	struct hid_report *report;
+	int ret;
+	__u8 feature_out[] = { 0x17, 0x00 };
+
+	report = hdev->report_enum[HID_FEATURE_REPORT].report_id_hash[0x17];
+	if (!report)
+		return false;
+
+	ret = hid_hw_raw_request(hdev, feature_out[0], feature_out, sizeof(feature_out), HID_FEATURE_REPORT, HID_REQ_SET_REPORT);
+	if (ret == 2) {
+		hid_info(hdev, "Seem to have successfully reset mouse vertical scroll wheel settings.\n");
+		return true;
+	} else {
+		hid_dbg(hdev, "Unknown response from reseting vertical scroll wheel settings with mouse, value returned: %i\n", ret);
+	}
+	return false;
+}
+
 static int ms_probe(struct hid_device *hdev, const struct hid_device_id *id)
 {
 	unsigned long quirks = id->driver_data;
@@ -250,6 +296,11 @@ static int ms_probe(struct hid_device *h
 		goto err_free;
 	}
 
+	if (quirks & MS_VSCROLL) {
+		if (check_vscroll_settings(hdev))
+			reset_vscroll_settings(hdev);
+	}
+
 	return 0;
 err_free:
 	return ret;
@@ -280,6 +331,10 @@ static const struct hid_device_id ms_dev
 		.driver_data = MS_HIDINPUT },
 	{ HID_USB_DEVICE(USB_VENDOR_ID_MICROSOFT, USB_DEVICE_ID_MS_TYPE_COVER_3_JP),
 		.driver_data = MS_HIDINPUT },
+	{ HID_USB_DEVICE(USB_VENDOR_ID_MICROSOFT, USB_DEVICE_ID_MS_WIRELESS_MOUSE_KSERIES),
+		.driver_data = MS_VSCROLL },
+	{ HID_USB_DEVICE(USB_VENDOR_ID_MICROSOFT, USB_DEVICE_ID_MS_SCULPT_ERGONOMIC_MOUSE),
+		.driver_data = MS_VSCROLL },
 
 	{ HID_BLUETOOTH_DEVICE(USB_VENDOR_ID_MICROSOFT, USB_DEVICE_ID_MS_PRESENTER_8K_BT),
 		.driver_data = MS_PRESENTER },
